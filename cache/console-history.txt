await contract.isIssuer("0x15d34AAf54267DB7D7c367839AAf71A00a2C6A65")
await contract.addIssuer("0x15d34AAf54267DB7D7c367839AAf71A00a2C6A65");
// ✅ Add your MetaMask wallet as an issuer
const contract = new ethers.Contract(contractAddress, abi, owner);
const abi = (await hre.artifacts.readArtifact("DocumentStore")).abi;
const contractAddress = "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512"; // your deployed contract
const [owner] = await ethers.getSigners();
  wait: [Function (anonymous)]
  chainId: 31337,
  creates: null,
  v: 1,
  s: '0x53c25ac57dd3b33689a5f8cb014961759a3eb5569c75ab676a19d95b5f2e42ae',
  r: '0xc26148c96ec7329371afed36c3360031d34997823d77ccda745191e62a21748e',
  data: '0x20694db000000000000000000000000015d34aaf54267db7d7c367839aaf71a00a2c6a65',
  nonce: 2,
  value: BigNumber { value: "0" },
  to: '0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512',
  gasLimit: BigNumber { value: "46312" },
  maxFeePerGas: BigNumber { value: "1756365624" },
  maxPriorityFeePerGas: BigNumber { value: "1000000000" },
  gasPrice: BigNumber { value: "1597622222" },
  from: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',
  confirmations: 1,
  transactionIndex: 0,
  blockNumber: 4,
  blockHash: '0x0ba3d3456f6afc2b1d977cc7c97b50b2ea57f63453ee02bb0d2155d699b3b531',
  accessList: [],
  type: 2,
  hash: '0x5d3179b5a4d81c0a54dcfc8d72c7eb0a513fc938df946f02ede6b8ee48e1e490',
{
await contract.isIssuer("0x15d34AAf54267DB7D7c367839AAf71A00a2C6A65")
await contract.addIssuer("0x15d34AAf54267DB7D7c367839AAf71A00a2C6A65");
// ✅ Add your MetaMask wallet as an issuer
const contract = new ethers.Contract(contractAddress, abi, owner);
const abi = (await hre.artifacts.readArtifact("DocumentStore")).abi;
const contractAddress = "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512"; // your deployed contract
const [owner] = await ethers.getSigners();